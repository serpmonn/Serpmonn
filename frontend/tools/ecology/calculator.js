/**
 * –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Å–ª–µ–¥–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
 * –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
 */

class EcoFootprintCalculator {
    constructor() {
        this.products = [];
        this.results = null;
        this.init();
    }

    init() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        this.setupEventListeners();
        this.loadSavedData();
        this.renderProducts();
    }

    setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        document.addEventListener('change', (e) => {
            if (e.target.classList.contains('product-select') || 
                e.target.classList.contains('quantity-input') || 
                e.target.classList.contains('unit-select')) {
                this.updateProductData();
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ä–∞—Å—á–µ—Ç–∞
        const calculateBtn = document.querySelector('.calculate-btn');
        if (calculateBtn) {
            calculateBtn.addEventListener('click', () => this.calculateFootprint());
        }
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
     */
    renderProducts() {
        const container = document.getElementById('products-container');
        
        if (!container) {
            console.error('–≠–ª–µ–º–µ–Ω—Ç products-container –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const allProducts = Object.values(ECO_DATABASE);
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        const categories = {};
        allProducts.forEach(product => {
            if (!categories[product.category]) {
                categories[product.category] = [];
            }
            categories[product.category].push(product);
        });

        // –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        let html = '<h3>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:</h3>';
        
        Object.keys(categories).forEach(category => {
            const categoryName = this.getCategoryName(category);
            html += `<div class="category-section">
                <h4>${categoryName}</h4>
                <div class="products-grid">`;
            
            categories[category].forEach(product => {
                const productId = Object.keys(ECO_DATABASE).find(key => ECO_DATABASE[key] === product);
                html += `<div class="product-card" data-product-id="${productId}">
                    <h5>${product.name}</h5>
                    <p>–£–≥–ª–µ—Ä–æ–¥–Ω—ã–π —Å–ª–µ–¥: ${product.carbonFootprint} –∫–≥ CO‚ÇÇ/–∫–≥</p>
                    <p>–í–æ–¥–Ω—ã–π —Å–ª–µ–¥: ${product.waterFootprint.toLocaleString()} –ª/–∫–≥</p>
                    <p>–≠–∫–æ-—Ä–µ–π—Ç–∏–Ω–≥: ${product.ecoRating}/10</p>
                    <button class="add-product-btn" onclick="addProductToCalculator('${productId}')">
                        –î–æ–±–∞–≤–∏—Ç—å –≤ —Ä–∞—Å—á–µ—Ç
                    </button>
                </div>`;
            });
            
            html += '</div></div>';
        });

        container.innerHTML = html;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
     */
    getCategoryName(category) {
        const categoryNames = {
            'meat': '–ú—è—Å–æ',
            'dairy': '–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã',
            'fish': '–†—ã–±–∞',
            'seafood': '–ú–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã',
            'vegetables': '–û–≤–æ—â–∏',
            'fruits': '–§—Ä—É–∫—Ç—ã',
            'grains': '–ó–µ—Ä–Ω–æ–≤—ã–µ',
            'legumes': '–ë–æ–±–æ–≤—ã–µ',
            'nuts': '–û—Ä–µ—Ö–∏',
            'beverages': '–ù–∞–ø–∏—Ç–∫–∏',
            'sweets': '–°–ª–∞–¥–æ—Å—Ç–∏'
        };
        return categoryNames[category] || category;
    }

    /**
     * –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–æ ID
     */
    addProductToCalculator(productId) {
        const product = ECO_DATABASE[productId];
        if (!product) {
            console.error('–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:', productId);
            return;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç –≤ —Å–ø–∏—Å–æ–∫
        this.products.push({
            id: productId,
            name: product.name,
            quantity: 1,
            unit: 'kg'
        });

        this.renderProductList();
        this.calculateFootprint();
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
     */
    renderProductList() {
        const container = document.getElementById('selected-products');
        
        if (!container) {
            console.error('–≠–ª–µ–º–µ–Ω—Ç selected-products –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        if (this.products.length === 0) {
            container.innerHTML = '<p>–ü—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã</p>';
            return;
        }

        let html = '<h3>–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:</h3>';
        
        this.products.forEach((product, index) => {
            const productData = ECO_DATABASE[product.id];
            html += `<div class="selected-product">
                <span>${product.name}</span>
                <input type="number" value="${product.quantity}" min="0" step="0.1" 
                       onchange="updateProductQuantity(${index}, this.value)">
                <select onchange="updateProductUnit(${index}, this.value)">
                    <option value="kg" ${product.unit === 'kg' ? 'selected' : ''}>–∫–≥</option>
                    <option value="g" ${product.unit === 'g' ? 'selected' : ''}>–≥</option>
                    <option value="l" ${product.unit === 'l' ? 'selected' : ''}>–ª</option>
                    <option value="ml" ${product.unit === 'ml' ? 'selected' : ''}>–º–ª</option>
                </select>
                <button onclick="removeProductFromList(${index})">–£–¥–∞–ª–∏—Ç—å</button>
            </div>`;
        });

        container.innerHTML = html;
    }

    /**
     * –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –≤ –∫–æ—Ä–∑–∏–Ω—É
     */
    addProduct() {
        const container = document.getElementById('products-container');
        const productRow = document.createElement('div');
        productRow.className = 'product-row';
        
        productRow.innerHTML = `
            <select class="product-select" data-product="">
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç...</option>
                <option value="beef">–ì–æ–≤—è–¥–∏–Ω–∞</option>
                <option value="lamb">–ë–∞—Ä–∞–Ω–∏–Ω–∞</option>
                <option value="pork">–°–≤–∏–Ω–∏–Ω–∞</option>
                <option value="chicken">–ö—É—Ä–∏—Ü–∞</option>
                <option value="fish">–†—ã–±–∞</option>
                <option value="eggs">–Ø–π—Ü–∞</option>
                <option value="milk">–ú–æ–ª–æ–∫–æ</option>
                <option value="cheese">–°—ã—Ä</option>
                <option value="rice">–†–∏—Å</option>
                <option value="wheat">–ü—à–µ–Ω–∏—Ü–∞</option>
                <option value="potatoes">–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å</option>
                <option value="tomatoes">–ü–æ–º–∏–¥–æ—Ä—ã</option>
                <option value="apples">–Ø–±–ª–æ–∫–∏</option>
                <option value="bananas">–ë–∞–Ω–∞–Ω—ã</option>
                <option value="coffee">–ö–æ—Ñ–µ</option>
                <option value="chocolate">–®–æ–∫–æ–ª–∞–¥</option>
                <option value="nuts">–û—Ä–µ—Ö–∏</option>
                <option value="vegetables">–û–≤–æ—â–∏ (—Å–º–µ—à–∞–Ω–Ω—ã–µ)</option>
                <option value="fruits">–§—Ä—É–∫—Ç—ã (—Å–º–µ—à–∞–Ω–Ω—ã–µ)</option>
            </select>
            <input type="number" class="quantity-input" placeholder="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ" min="0" step="0.1" value="1">
            <select class="unit-select">
                <option value="kg">–∫–≥</option>
                <option value="g">–≥</option>
                <option value="l">–ª</option>
                <option value="ml">–º–ª</option>
                <option value="pieces">—à—Ç</option>
            </select>
            <button class="remove-btn" onclick="removeProduct(this)">üóëÔ∏è</button>
        `;

        container.appendChild(productRow);
        this.updateRemoveButtons();
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
     */
    removeProduct(button) {
        const productRow = button.closest('.product-row');
        productRow.remove();
        this.updateRemoveButtons();
        this.updateProductData();
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è
     */
    updateRemoveButtons() {
        const productRows = document.querySelectorAll('.product-row');
        productRows.forEach((row, index) => {
            const removeBtn = row.querySelector('.remove-btn');
            if (productRows.length > 1) {
                removeBtn.style.display = 'block';
            } else {
                removeBtn.style.display = 'none';
            }
        });
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
     */
    updateProductData() {
        this.products = [];
        const productRows = document.querySelectorAll('.product-row');
        
        productRows.forEach(row => {
            const productSelect = row.querySelector('.product-select');
            const quantityInput = row.querySelector('.quantity-input');
            const unitSelect = row.querySelector('.unit-select');
            
            if (productSelect.value && quantityInput.value) {
                const quantity = parseFloat(quantityInput.value);
                const unit = unitSelect.value;
                const productId = productSelect.value;
                
                if (quantity > 0) {
                    this.products.push({
                        id: productId,
                        quantity: quantity,
                        unit: unit
                    });
                }
            }
        });
    }

    /**
     * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å–ª–µ–¥
     */
    async calculateFootprint() {
        this.updateProductData();
        
        if (this.products.length === 0) {
            this.showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–æ–¥—É–∫—Ç');
            return;
        }

        this.showLoading();

        try {
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ª–µ–¥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
            const productFootprints = [];
            let totalCarbon = 0;
            let totalWater = 0;
            let totalLand = 0;
            let totalEcoRating = 0;

            this.products.forEach(product => {
                const quantityInKg = convertToKilograms(product.quantity, product.unit, product.id);
                const footprint = calculateProductFootprint(product.id, quantityInKg);
                
                if (footprint) {
                    productFootprints.push(footprint);
                    totalCarbon += footprint.carbonFootprint;
                    totalWater += footprint.waterFootprint;
                    totalLand += footprint.landFootprint;
                    totalEcoRating += footprint.ecoRating;
                }
            });

            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —ç–∫–æ-—Ä–µ–π—Ç–∏–Ω–≥
            const averageEcoRating = totalEcoRating / productFootprints.length;

            // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            const recommendations = getRecommendations(productFootprints);
            const comparisons = getComparisons(productFootprints);

            this.results = {
                totalCarbon: Math.round(totalCarbon * 100) / 100,
                totalWater: Math.round(totalWater),
                totalLand: Math.round(totalLand * 100) / 100,
                ecoRating: Math.round(averageEcoRating * 10) / 10,
                products: productFootprints,
                recommendations: recommendations,
                comparisons: comparisons
            };

            this.displayResults();
            this.saveResults();

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞:', error);
            this.showError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
     */
    displayResults() {
        const resultsSection = document.getElementById('results-section');
        resultsSection.style.display = 'block';

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        const carbonEl = document.getElementById('carbon-footprint');
        const waterEl = document.getElementById('water-footprint');
        const landEl = document.getElementById('land-footprint');
        const ecoEl = document.getElementById('eco-score');
        
        if (carbonEl) carbonEl.textContent = this.results.totalCarbon;
        if (waterEl) waterEl.textContent = this.results.totalWater.toLocaleString();
        if (landEl) landEl.textContent = this.results.totalLand;
        if (ecoEl) ecoEl.textContent = this.results.ecoRating;

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        this.displayComparisons();
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        this.displayRecommendations();

        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
        resultsSection.scrollIntoView({ behavior: 'smooth' });
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞–º–∏
     */
    displayComparisons() {
        const comparisonContainer = document.getElementById('comparison-results');
        
        if (!comparisonContainer) {
            console.error('–≠–ª–µ–º–µ–Ω—Ç comparison-results –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        comparisonContainer.innerHTML = '';

        this.results.comparisons.forEach(comparison => {
            const comparisonItem = document.createElement('div');
            comparisonItem.className = 'comparison-item';
            comparisonItem.innerHTML = `
                <div>
                    <strong>${comparison.product}</strong><br>
                    <small>–¢–µ–∫—É—â–∏–π —Å–ª–µ–¥: ${comparison.currentFootprint.toFixed(2)} –∫–≥ CO‚ÇÇ</small>
                </div>
                <div>
                    <strong>–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:</strong><br>
                    <small>${comparison.alternatives.join(', ')}</small><br>
                    <small style="color: #2E8B57;">–≠–∫–æ–Ω–æ–º–∏—è: ~${comparison.potentialSavings.toFixed(2)} –∫–≥ CO‚ÇÇ</small>
                </div>
            `;
            comparisonContainer.appendChild(comparisonItem);
        });
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
     */
    displayRecommendations() {
        const recommendationsContainer = document.getElementById('recommendations-list');
        
        if (!recommendationsContainer) {
            console.error('–≠–ª–µ–º–µ–Ω—Ç recommendations-list –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        recommendationsContainer.innerHTML = '';

        this.results.recommendations.forEach(rec => {
            const recItem = document.createElement('div');
            recItem.className = 'recommendation-item';
            
            let icon = 'üí°';
            if (rec.type === 'warning') icon = '‚ö†Ô∏è';
            if (rec.type === 'suggestion') icon = 'üå±';
            
            recItem.innerHTML = `
                <strong>${icon} ${rec.title}</strong><br>
                <small>${rec.description}</small>
            `;
            recommendationsContainer.appendChild(recItem);
        });
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
     */
    showLoading() {
        const resultsSection = document.getElementById('results-section');
        resultsSection.style.display = 'block';
        resultsSection.innerHTML = `
            <div class="loading">
                <div class="spinner"></div>
                <p>–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å–ª–µ–¥...</p>
            </div>
        `;
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
     */
    showError(message) {
        const resultsSection = document.getElementById('results-section');
        resultsSection.style.display = 'block';
        resultsSection.innerHTML = `
            <div class="error">
                <strong>–û—à–∏–±–∫–∞:</strong> ${message}
            </div>
        `;
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ localStorage
     */
    saveResults() {
        if (this.results) {
            localStorage.setItem('ecoFootprintResults', JSON.stringify({
                results: this.results,
                timestamp: new Date().toISOString()
            }));
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
     */
    loadSavedData() {
        const saved = localStorage.getItem('ecoFootprintResults');
        if (saved) {
            try {
                const data = JSON.parse(saved);
                const savedDate = new Date(data.timestamp);
                const now = new Date();
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
                if (now - savedDate < 24 * 60 * 60 * 1000) {
                    this.results = data.results;
                    this.displayResults();
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
            }
        }
    }

    /**
     * –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
     */
    shareResults(platform) {
        if (!this.results) {
            alert('–°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å–ª–µ–¥');
            return;
        }

        const text = `–ú–æ–π —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å–ª–µ–¥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${this.results.totalCarbon} –∫–≥ CO‚ÇÇ, ${this.results.totalWater.toLocaleString()} –ª –≤–æ–¥—ã. –≠–∫–æ-—Ä–µ–π—Ç–∏–Ω–≥: ${this.results.ecoRating}/10. –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ —Å–≤–æ–π –Ω–∞ SerpMonn!`;
        const url = window.location.href;

        let shareUrl = '';
        
        switch (platform) {
            case 'facebook':
                shareUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(url)}&quote=${encodeURIComponent(text)}`;
                break;
            case 'twitter':
                shareUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(text)}&url=${encodeURIComponent(url)}`;
                break;
            case 'telegram':
                shareUrl = `https://t.me/share/url?url=${encodeURIComponent(url)}&text=${encodeURIComponent(text)}`;
                break;
        }

        if (shareUrl) {
            window.open(shareUrl, '_blank', 'width=600,height=400');
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è HTML
let calculator;

function addProduct() {
    calculator.addProduct();
}

function removeProduct(button) {
    calculator.removeProduct(button);
}

function calculateFootprint() {
    calculator.calculateFootprint();
}

function shareResults(platform) {
    calculator.shareResults(platform);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    calculator = new EcoFootprintCalculator();
});

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —á–∏—Å–ª–æ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á
 */
function formatNumber(num) {
    return num.toLocaleString('ru-RU');
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è —ç–∫–æ-—Ä–µ–π—Ç–∏–Ω–≥–∞
 */
function getEcoRatingColor(rating) {
    if (rating >= 8) return '#2E8B57'; // –ó–µ–ª–µ–Ω—ã–π
    if (rating >= 6) return '#FFA500'; // –û—Ä–∞–Ω–∂–µ–≤—ã–π
    if (rating >= 4) return '#FF6347'; // –ö—Ä–∞—Å–Ω–æ–≤–∞—Ç—ã–π
    return '#DC143C'; // –ö—Ä–∞—Å–Ω—ã–π
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —ç–∫–æ-—Ä–µ–π—Ç–∏–Ω–≥–∞
 */
function getEcoRatingDescription(rating) {
    if (rating >= 8) return '–û—Ç–ª–∏—á–Ω—ã–π —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä!';
    if (rating >= 6) return '–•–æ—Ä–æ—à–∏–π —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä';
    if (rating >= 4) return '–£–º–µ—Ä–µ–Ω–Ω–æ–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ —ç–∫–æ–ª–æ–≥–∏—é';
    return '–í—ã—Å–æ–∫–æ–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ —ç–∫–æ–ª–æ–≥–∏—é';
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è HTML
window.calculateFootprint = function() {
    if (window.ecoCalculator) {
        window.ecoCalculator.calculateFootprint();
    } else {
        console.error('–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
};

window.addProduct = function() {
    if (window.ecoCalculator) {
        window.ecoCalculator.addProduct();
    } else {
        console.error('–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
};

window.removeProduct = function(button) {
    if (window.ecoCalculator) {
        window.ecoCalculator.removeProduct(button);
    } else {
        console.error('–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
};

window.shareResults = function(platform) {
    if (window.ecoCalculator) {
        window.ecoCalculator.shareResults(platform);
    } else {
        console.error('–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
};

window.addProductToCalculator = function(productId) {
    if (window.ecoCalculator) {
        window.ecoCalculator.addProductToCalculator(productId);
    } else {
        console.error('–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
};

window.updateProductQuantity = function(index, quantity) {
    if (window.ecoCalculator) {
        window.ecoCalculator.products[index].quantity = parseFloat(quantity);
        window.ecoCalculator.calculateFootprint();
    }
};

window.updateProductUnit = function(index, unit) {
    if (window.ecoCalculator) {
        window.ecoCalculator.products[index].unit = unit;
        window.ecoCalculator.calculateFootprint();
    }
};

window.removeProductFromList = function(index) {
    if (window.ecoCalculator) {
        window.ecoCalculator.products.splice(index, 1);
        window.ecoCalculator.renderProductList();
        window.ecoCalculator.calculateFootprint();
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', function() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    const requiredElements = [
        'products-container',
        'selected-products',
        'carbon-footprint',
        'water-footprint', 
        'land-footprint',
        'eco-score',
        'results-section',
        'comparison-results',
        'recommendations-list'
    ];
    
    const missingElements = requiredElements.filter(id => !document.getElementById(id));
    
    if (missingElements.length > 0) {
        console.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —ç–ª–µ–º–µ–Ω—Ç—ã:', missingElements);
        return;
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã
    window.ecoCalculator = new EcoFootprintCalculator();
    console.log('–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (typeof module !== 'undefined' && module.exports) {
    module.exports = EcoFootprintCalculator;
}