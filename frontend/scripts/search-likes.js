// –ü—Ä–æ–¥–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ª–∞–π–∫–æ–≤: –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞ –∏ API /api/likes
// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≥–æ—Å—Ç–µ–≤—ã–µ –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ª–∞–π–∫–∏ —Å –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º

const LIKES_ENDPOINT = '/api/likes';

function stableUrlFromResultNode(node) {
  try {
    const link = node.querySelector('.gs-title a, a.gs-title');
    if (!link || !link.href) return null;
    const u = new URL(link.href);
    // –£–±–∏—Ä–∞–µ–º —Ç—Ä–µ–∫–∏–Ω–≥-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞
    ['gclid','fbclid','yclid','msclkid'].forEach(p => u.searchParams.delete(p));
    return u.toString();
  } catch {
    return null;
  }
}

async function fetchCounts(url) {
  try {
    const qs = new URLSearchParams({ url: encodeURIComponent(url) }).toString();
    const r = await fetch(`${LIKES_ENDPOINT}?${qs}`, { 
      credentials: 'same-origin',
      headers: { 'Accept': 'application/json' }
    });
    if (!r.ok) return { guest: 0, auth: 0, total: 0, weight_auth: 3 };
    const j = await r.json();
    if (j.status !== 'ok') return { guest: 0, auth: 0, total: 0, weight_auth: 3 };
    const c = j.counts || { guest: 0, auth: 0, total: 0 };
    return { 
      guest: Number(c.guest||0), 
      auth: Number(c.auth||0), 
      total: Number(c.total||0), 
      weight_auth: Number(j.weight_auth||3) 
    };
  } catch (error) {
    console.warn('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–æ–≤ –ª–∞–π–∫–æ–≤:', error);
    return { guest: 0, auth: 0, total: 0, weight_auth: 3 };
  }
}

async function sendLike(url) {
  try {
    const params = new URLSearchParams({ url: url });
    // user_id –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Å–µ—Ä–≤–µ—Ä–æ–º –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞
    
    const r = await fetch(LIKES_ENDPOINT, {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/x-www-form-urlencoded',
        'Accept': 'application/json'
      },
      body: params.toString(),
      credentials: 'same-origin'
    });
    
    if (!r.ok) throw new Error(`HTTP ${r.status}`);
    const j = await r.json();
    if (j.status !== 'ok') throw new Error(j.message || '–û—à–∏–±–∫–∞ API');
    
    const c = j.counts || { guest: 0, auth: 0, total: 0 };
    return { 
      guest: Number(c.guest||0), 
      auth: Number(c.auth||0), 
      total: Number(c.total||0), 
      type: j.type,
      accepted: j.accepted 
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∞–π–∫–∞:', error);
    throw error;
  }
}

function createLikeBadge(initial, liked) {
  const btn = document.createElement('button');
  btn.type = 'button';
  btn.className = `like-badge${liked ? ' liked' : ''}`;
  btn.innerHTML = `‚ù§ <span class="count">${initial.total}</span> <span class="subcount" title="–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö">(‚úì ${initial.auth})</span>`;
  
  // –°—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ª–∞–π–∫–∞
  btn.style.cssText = `
    border: 1px solid #ddd;
    border-radius: 20px;
    padding: 4px 10px;
    background: #fff;
    cursor: pointer;
    font-size: 12px;
    margin-top: 4px;
    transition: all 0.2s ease;
  `;
  
  if (liked) {
    btn.style.background = '#ffecef';
    btn.style.borderColor = '#ffc2cb';
  }
  
  return btn;
}

function markLiked(url) {
  try {
    const key = 'spn_liked_urls';
    const set = new Set(JSON.parse(localStorage.getItem(key) || '[]'));
    set.add(url);
    localStorage.setItem(key, JSON.stringify(Array.from(set)));
  } catch (error) {
    console.warn('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–∞–π–∫–∞ –≤ localStorage:', error);
  }
}

function isLiked(url) {
  try {
    const key = 'spn_liked_urls';
    const arr = JSON.parse(localStorage.getItem(key) || '[]');
    return Array.isArray(arr) && arr.includes(url);
  } catch {
    return false;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ cookies)
function getCurrentUserId() {
  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ JWT —Ç–æ–∫–µ–Ω –≤ cookies
  // –°–µ—Ä–≤–µ—Ä —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç user_id –∏–∑ —Ç–æ–∫–µ–Ω–∞, –Ω–∞–º –Ω–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –µ–≥–æ —è–≤–Ω–æ
  return null; // –ü—É—Å—Ç—å —Å–µ—Ä–≤–µ—Ä —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–∑ JWT
}

async function enhanceResult(node) {
  const url = stableUrlFromResultNode(node);
  if (!url) return;

  const container = document.createElement('div');
  container.className = 'like-container';
  node.appendChild(container);

  const liked = isLiked(url);
  const counts = await fetchCounts(url);

  const btn = createLikeBadge(counts, liked);
  container.appendChild(btn);

  let busy = false;
  btn.addEventListener('click', async () => {
    if (busy) return;
    if (isLiked(url)) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ —É–∂–µ –ª–∞–π–∫–Ω—É—Ç–æ
      btn.style.opacity = '0.6';
      setTimeout(() => btn.style.opacity = '1', 1000);
      return;
    }
    
    busy = true;
    btn.style.opacity = '0.6';
    
    try {
      const result = await sendLike(url);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫–∏
      btn.querySelector('.count').textContent = String(result.total);
      const sub = btn.querySelector('.subcount');
      if (sub) sub.textContent = `(‚úì ${result.auth})`;
      
      btn.classList.add('liked');
      btn.style.background = '#ffecef';
      btn.style.borderColor = '#ffc2cb';
      
      markLiked(url);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
      if (result.type === 'auth') {
        console.log('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–π –ª–∞–π–∫ –¥–æ–±–∞–≤–ª–µ–Ω');
      } else {
        console.log('üëç –ì–æ—Å—Ç–µ–≤–æ–π –ª–∞–π–∫ –¥–æ–±–∞–≤–ª–µ–Ω');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ª–∞–π–∫–∞:', error);
      // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    } finally {
      busy = false;
      btn.style.opacity = '1';
    }
  });
}

function scanAndEnhance() {
  const results = document.querySelectorAll('.gsc-webResult.gsc-result');
  results.forEach(node => {
    if (node.__spnLiked) return;
    node.__spnLiked = true;
    enhanceResult(node);
  });
}

function bootWhenCseReady() {
  // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑, —Ç–∞–∫ –∫–∞–∫ CSE —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∏ –ø—Ä–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  scanAndEnhance();
  const obs = new MutationObserver(() => scanAndEnhance());
  obs.observe(document.body, { childList: true, subtree: true });
}

// –ó–∞–ø—É—Å–∫ –ø–æ—Å–ª–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ DOM
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', bootWhenCseReady);
} else {
  bootWhenCseReady();
}