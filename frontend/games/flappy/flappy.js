// flappy.js - –û—Å–Ω–æ–≤–Ω–∞—è –∏–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –∏–≥—Ä—ã "Flappy Bird"

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–≥—Ä—ã, –æ–±–µ—Ä–Ω—É—Ç–∞—è –≤ IIFE –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ scope
(function() {
    'use strict';
    
    const canvas = document.getElementById('game');
    const ctx = canvas.getContext('2d');
    
    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–≥—Ä—ã
    const W = 240;
    const H = 320;
    const SCALE = 2;
    
    canvas.width = W * SCALE;
    canvas.height = H * SCALE;
    ctx.scale(SCALE, SCALE);

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–≥—Ä—ã
    const gap = 60;
    const pipeWidth = 26;
    const floorY = H - 20;
    const gravity = 0.35;
    const flapVel = -5.2;
    const pipeSpeed = 1.8;

    // DOM —ç–ª–µ–º–µ–Ω—Ç—ã
    const scoreEl = document.getElementById('score');
    const bestEl = document.getElementById('best');
    const btnStart = document.getElementById('btnStart');
    const btnReset = document.getElementById('btnReset');

    // –†–µ–∫–æ—Ä–¥
    const bestKey = 'flappy_best_score_v1';
    let best = parseInt(localStorage.getItem(bestKey) || '0', 10);
    bestEl.textContent = String(best);

    // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
    let bird, pipes, score, alive, started, gameActive;
    let resetButtonClicked = false; // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–Ω–æ–≤–æ"

    /**
     * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –∫ –Ω–∞—á–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
     */
    function reset() {
        bird = {
            x: 40,
            y: H / 2,
            vy: 0,
            r: 6
        };
        
        pipes = [];
        score = 0;
        alive = true;
        started = false;
        gameActive = false;
        
        spawnPipe();
        updateScore();
    }

    /**
     * –ù–∞—á–∏–Ω–∞–µ—Ç –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å
     */
    function startGame() {
        started = true;
        gameActive = true;
        alive = true;
    }

    /**
     * –ü–æ–ª–Ω—ã–π —Ä–µ—Å—Ç–∞—Ä—Ç –∏–≥—Ä—ã (—Å–±—Ä–æ—Å + —Å—Ç–∞—Ä—Ç)
     */
    function fullRestart() {
        closeAdIfOpen();
        reset();
        startGame();
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏–≥—Ä—ã
     */
    function drawWelcomeScreen() {
        // –û—á–∏—â–∞–µ–º canvas
        const grad = ctx.createLinearGradient(0, 0, 0, H);
        grad.addColorStop(0, '#6dd5fa');
        grad.addColorStop(1, '#2980b9');
        ctx.fillStyle = grad;
        ctx.fillRect(0, 0, W, H);

        // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ç—Ä—É–±—ã
        ctx.fillStyle = getComputedStyle(document.documentElement).getPropertyValue('--pipe') || '#2ecc71';
        for (const p of pipes) {
            ctx.fillRect(p.x, 0, pipeWidth, p.top);
            ctx.fillRect(p.x, p.top + gap, pipeWidth, H - (p.top + gap));
        }

        // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∑–µ–º–ª—é
        ctx.fillStyle = '#1f2a38';
        ctx.fillRect(0, floorY, W, H - floorY);

        // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –ø—Ç–∏—Ü—É
        ctx.fillStyle = getComputedStyle(document.documentElement).getPropertyValue('--bird') || '#f1c40f';
        ctx.beginPath();
        ctx.arc(bird.x, bird.y, bird.r, 0, Math.PI * 2);
        ctx.fill();

        // –ó–∞—Ç–µ–º–Ω—è–µ–º —ç–∫—Ä–∞–Ω –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';
        ctx.fillRect(0, 0, W, H);

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ctx.fillStyle = '#fff';
        ctx.textAlign = 'center';
        ctx.font = 'bold 18px system-ui, -apple-system, Segoe UI, Roboto, Arial';
        ctx.fillText('Flappy Bird', W / 2, H / 2 - 50);

        // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        ctx.font = '12px system-ui, -apple-system, Segoe UI, Roboto, Arial';
        ctx.fillText('–ù–∞–∂–º–∏—Ç–µ –ü–†–û–ë–ï–õ, –ö–õ–ò–ö', W / 2, H / 2 - 15);
        ctx.fillText('–∏–ª–∏ –∫–Ω–æ–ø–∫—É –°–¢–ê–†–¢', W / 2, H / 2 + 0);
        ctx.fillText('—á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å', W / 2, H / 2 + 15);

        // –†–µ–∫–æ—Ä–¥
        ctx.font = '11px system-ui, -apple-system, Segoe UI, Roboto, Arial';
        ctx.fillStyle = '#f1c40f';
        ctx.fillText(`–í–∞—à —Ä–µ–∫–æ—Ä–¥: ${best}`, W / 2, H / 2 + 40);
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Ç—Ä—É–±—É
     */
    function spawnPipe() {
        const topH = 30 + Math.floor(Math.random() * (H - gap - 80));
        pipes.push({
            x: W + 20,
            top: topH,
            passed: false
        });
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω —à–∞–≥ –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
     */
    function step() {
        if (!gameActive || !alive) return;
        
        // –§–∏–∑–∏–∫–∞ –ø—Ç–∏—Ü—ã
        bird.vy += gravity;
        bird.y += bird.vy;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å –ø–æ–ª–æ–º –∏ –ø–æ—Ç–æ–ª–∫–æ–º
        if (bird.y + bird.r > floorY) {
            bird.y = floorY - bird.r;
            alive = false;
            showGameOver();
            return;
        }
        if (bird.y - bird.r < 0) {
            bird.y = bird.r;
            bird.vy = 0;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä—É–±
        for (let i = 0; i < pipes.length; i++) {
            const p = pipes[i];
            p.x -= pipeSpeed;
            
            if (!p.passed && p.x + pipeWidth < bird.x) {
                p.passed = true;
                score += 1;
                updateScore();
                
                if (score > best) {
                    best = score;
                    localStorage.setItem(bestKey, String(best));
                    bestEl.textContent = String(best);
                    
                    if (window.flappyNotifications) {
                        window.flappyNotifications.showNewRecordNotification(score);
                    }
                }
            }
        }
        
        // –£–¥–∞–ª—è–µ–º —Ç—Ä—É–±—ã
        if (pipes.length && pipes[0].x + pipeWidth < -10) {
            pipes.shift();
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç—Ä—É–±—É
        if (pipes.length === 0 || pipes[pipes.length - 1].x < W - 110) {
            spawnPipe();
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π —Å —Ç—Ä—É–±–∞–º–∏
        for (const p of pipes) {
            const topRect = { x: p.x, y: 0, w: pipeWidth, h: p.top };
            const botRect = { x: p.x, y: p.top + gap, w: pipeWidth, h: H - (p.top + gap) };
            
            if (circleRectCollide(bird.x, bird.y, bird.r, topRect) || 
                circleRectCollide(bird.x, bird.y, bird.r, botRect)) {
                alive = false;
                showGameOver();
                return;
            }
        }

        drawGame();
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ –∫—Ä—É–≥–∞ —Å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–º
     */
    function circleRectCollide(cx, cy, cr, r) {
        const testX = Math.max(r.x, Math.min(cx, r.x + r.w));
        const testY = Math.max(r.y, Math.min(cy, r.y + r.h));
        const dx = cx - testX;
        const dy = cy - testY;
        return dx * dx + dy * dy <= cr * cr;
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å
     */
    function drawGame() {
        const grad = ctx.createLinearGradient(0, 0, 0, H);
        grad.addColorStop(0, '#6dd5fa');
        grad.addColorStop(1, '#2980b9');
        ctx.fillStyle = grad;
        ctx.fillRect(0, 0, W, H);

        ctx.fillStyle = getComputedStyle(document.documentElement).getPropertyValue('--pipe') || '#2ecc71';
        for (const p of pipes) {
            ctx.fillRect(p.x, 0, pipeWidth, p.top);
            ctx.fillRect(p.x, p.top + gap, pipeWidth, H - (p.top + gap));
        }

        ctx.fillStyle = '#1f2a38';
        ctx.fillRect(0, floorY, W, H - floorY);

        ctx.fillStyle = getComputedStyle(document.documentElement).getPropertyValue('--bird') || '#f1c40f';
        ctx.beginPath();
        ctx.arc(bird.x, bird.y, bird.r, 0, Math.PI * 2);
        ctx.fill();

        ctx.fillStyle = '#fff';
        ctx.font = 'bold 14px system-ui, -apple-system, Segoe UI, Roboto, Arial';
        ctx.textAlign = 'left';
        ctx.fillText(String(score), 8, 18);
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—á–µ—Ç–∞
     */
    function updateScore() {
        scoreEl.textContent = String(score);
    }

    /**
     * –ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Ä–µ–∫–ª–∞–º—É –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞
     */
    function closeAdIfOpen() {
        const adOverlay = document.getElementById('game-ad-overlay');
        if (adOverlay) {
            adOverlay.remove();
        }
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
     */
    function showGameOver() {
        gameActive = false;
        
        ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';
        ctx.fillRect(0, 0, W, H);
        
        ctx.fillStyle = '#fff';
        ctx.textAlign = 'center';
        ctx.font = 'bold 18px system-ui, -apple-system, Segoe UI, Roboto, Arial';
        ctx.fillText('–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!', W / 2, H / 2 - 50);

        ctx.font = '14px system-ui, -apple-system, Segoe UI, Roboto, Arial';
        ctx.fillText(`–í–∞—à —Å—á—ë—Ç: ${score}`, W / 2, H / 2 - 20);

        if (score === best && score > 0) {
            ctx.fillStyle = '#f1c40f';
            ctx.font = '14px system-ui, -apple-system, Segoe UI, Roboto, Arial';
            ctx.fillText('üéâ –ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥! üéâ', W / 2, H / 2 + 5);
            ctx.fillStyle = '#fff';
        }

        ctx.font = '11px system-ui, -apple-system, Segoe UI, Roboto, Arial';
        ctx.fillText('–ù–∞–∂–º–∏—Ç–µ –ü–†–û–ë–ï–õ, R/–ö', W / 2, H / 2 + 35);
        ctx.fillText('–∏–ª–∏ –∫–Ω–æ–ø–∫—É –ó–ê–ù–û–í–û', W / 2, H / 2 + 50);
        ctx.fillText('—á—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞', W / 2, H / 2 + 65);

        // –£–º–Ω—ã–π –ø–æ–∫–∞–∑ —Ä–µ–∫–ª–∞–º—ã
        try {
            if (window.showFullScreenAd) {
                if (score === best && score > 15 && Math.random() < 0.4) {
                    setTimeout(() => window.showFullScreenAd(), 1000);
                } else if (Math.random() < 0.25) {
                    setTimeout(() => window.showFullScreenAd(), 1000);
                } else if (score > 20 && Math.random() < 0.6) {
                    setTimeout(() => window.showFullScreenAd(), 1000);
                }
            }
        } catch (_) {}
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∑–º–∞—Ö –∫—Ä—ã–ª—å–µ–≤
     */
    function flap() {
        if (gameActive && alive) {
            bird.vy = flapVel;
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã
     */
    function handleGameStart() {
        closeAdIfOpen();
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–Ω–æ–≤–æ"
        resetButtonClicked = false;
        
        if (!started) {
            startGame();
        } else if (!gameActive) {
            fullRestart();
        }
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    canvas.addEventListener('mousedown', (e) => {
        if (!started || !gameActive) {
            handleGameStart();
        } else {
            flap();
        }
    });
    
    canvas.addEventListener('touchstart', (e) => {
        e.preventDefault();
        if (!started || !gameActive) {
            handleGameStart();
        } else {
            flap();
        }
    }, { passive: false });
    
    window.addEventListener('keydown', (e) => {
        const k = e.key.toLowerCase();
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ä–µ–∫–ª–∞–º—É –ø—Ä–∏ –ª—é–±–æ–º –Ω–∞–∂–∞—Ç–∏–∏ –∫–ª–∞–≤–∏—à —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        closeAdIfOpen();
        
        if (k === ' ') {
            // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ü–†–û–ë–ï–õ–ê
            e.preventDefault();
            
            if (!started || !gameActive) {
                handleGameStart();
            } else {
                flap();
            }
        }
        
        if ((k === 'r' || k === '–∫') && (!started || !gameActive)) {
            fullRestart();
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    btnStart.addEventListener('click', () => {
        fullRestart();
    });
    
    btnReset.addEventListener('click', () => {
        closeAdIfOpen();
        reset();
        // –£–±–∏—Ä–∞–µ–º —Ñ–æ–∫—É—Å —Å –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –ü–†–û–ë–ï–õ –Ω–µ –Ω–∞–∂–∏–º–∞–ª –µ–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        btnReset.blur();
    });

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
     */
    function loop() {
        if (gameActive) {
            step();
        } else if (!started) {
            drawWelcomeScreen();
        }
        requestAnimationFrame(loop);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
    reset();
    loop();

})();