// –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–∫–µ—Ç–æ–º –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
import { personalizationManager } from './personalization.js';

class LayoutManager {
    constructor() {
        this.currentLayout = 'standard';
        this.layoutConfigs = {
            compact: {
                newsHeight: '25%',
                searchHeight: '15%',
                adHeight: '10%',
                showStats: false,
                showRecommendations: false
            },
            standard: {
                newsHeight: '40%',
                searchHeight: '20%',
                adHeight: '15%',
                showStats: true,
                showRecommendations: true
            },
            detailed: {
                newsHeight: '60%',
                searchHeight: '25%',
                adHeight: '20%',
                showStats: true,
                showRecommendations: true
            }
        };
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞–∫–µ—Ç–∞
    init() {
        const preferences = personalizationManager.getCurrentPreferences();
        this.currentLayout = preferences.layout || 'standard';
        this.applyLayout(this.currentLayout);
        this.setupLayoutControls();
    }

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∞–∫–µ—Ç–∞
    applyLayout(layoutType) {
        const config = this.layoutConfigs[layoutType];
        if (!config) return;

        this.currentLayout = layoutType;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º
        this.updateContainerStyles(config);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        this.toggleElements(config);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        personalizationManager.updatePreferences({ layout: layoutType });
        
        console.log(`–ü—Ä–∏–º–µ–Ω–µ–Ω –º–∞–∫–µ—Ç: ${layoutType}`);
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    updateContainerStyles(config) {
        const newsContainer = document.getElementById('news-container');
        const searchContainer = document.querySelector('.main-search-container');
        const adContainer = document.querySelector('.ad-container');

        if (newsContainer) {
            newsContainer.style.minHeight = config.newsHeight;
            newsContainer.style.maxHeight = config.newsHeight;
        }

        if (searchContainer) {
            searchContainer.style.minHeight = config.searchHeight;
        }

        if (adContainer) {
            adContainer.style.minHeight = config.adHeight;
        }
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    toggleElements(config) {
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        const statsElements = document.querySelectorAll('.news-stats');
        statsElements.forEach(element => {
            element.style.display = config.showStats ? 'flex' : 'none';
        });

        // –ü–∞–Ω–µ–ª—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        const recommendationsPanel = document.getElementById('recommendations-panel');
        if (recommendationsPanel) {
            recommendationsPanel.style.display = config.showRecommendations ? 'block' : 'none';
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–∫–µ—Ç–æ–º
    setupLayoutControls() {
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–∞–∫–µ—Ç–∞
        this.addLayoutToggleButton();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ –º–∞–∫–µ—Ç–∞
        this.addLayoutIndicator();
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–∞–∫–µ—Ç–∞
    addLayoutToggleButton() {
        const header = document.querySelector('.news-header');
        if (!header) return;

        const controls = header.querySelector('.news-controls');
        if (!controls) return;

        const layoutBtn = document.createElement('button');
        layoutBtn.className = 'btn btn-secondary';
        layoutBtn.id = 'layout-toggle-btn';
        layoutBtn.innerHTML = `
            <span class="btn-icon">üìê</span>
            –ú–∞–∫–µ—Ç
        `;

        layoutBtn.addEventListener('click', () => {
            this.showLayoutSelector();
        });

        controls.appendChild(layoutBtn);
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –º–∞–∫–µ—Ç–∞
    addLayoutIndicator() {
        const header = document.querySelector('.news-header');
        if (!header) return;

        const headerContent = header.querySelector('.news-header-content');
        if (!headerContent) return;

        const indicator = document.createElement('div');
        indicator.className = 'layout-indicator';
        indicator.innerHTML = `
            <span class="indicator-icon">üìê</span>
            <span class="indicator-text">${this.getLayoutDisplayName(this.currentLayout)}</span>
        `;

        headerContent.appendChild(indicator);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ –º–∞–∫–µ—Ç–∞
    getLayoutDisplayName(layoutType) {
        const names = {
            compact: '–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π',
            standard: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π',
            detailed: '–ü–æ–¥—Ä–æ–±–Ω—ã–π'
        };
        return names[layoutType] || layoutType;
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–µ–ª–µ–∫—Ç–æ—Ä –º–∞–∫–µ—Ç–∞
    showLayoutSelector() {
        const modal = this.createLayoutSelectorModal();
        document.body.appendChild(modal);
        
        setTimeout(() => modal.classList.add('show'), 10);
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤—ã–±–æ—Ä–∞ –º–∞–∫–µ—Ç–∞
    createLayoutSelectorModal() {
        const modal = document.createElement('div');
        modal.className = 'layout-selector-modal';
        
        const layoutOptions = personalizationManager.getLayoutOptions();
        
        modal.innerHTML = `
            <div class="modal-overlay"></div>
            <div class="modal-content">
                <div class="modal-header">
                    <h2>–í—ã–±–æ—Ä –º–∞–∫–µ—Ç–∞</h2>
                    <button class="modal-close">√ó</button>
                </div>
                <div class="modal-body">
                    <div class="layout-options-grid">
                        ${Object.entries(layoutOptions).map(([id, option]) => `
                            <div class="layout-option ${id === this.currentLayout ? 'active' : ''}" data-layout="${id}">
                                <div class="layout-preview">
                                    <div class="preview-header">${option.name}</div>
                                    <div class="preview-content">
                                        <div class="preview-news" style="height: ${this.layoutConfigs[id].newsHeight}"></div>
                                        <div class="preview-search" style="height: ${this.layoutConfigs[id].searchHeight}"></div>
                                        <div class="preview-ad" style="height: ${this.layoutConfigs[id].adHeight}"></div>
                                    </div>
                                </div>
                                <div class="layout-info">
                                    <h3>${option.name}</h3>
                                    <p>${option.description}</p>
                                </div>
                            </div>
                        `).join('')}
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" id="cancel-layout">–û—Ç–º–µ–Ω–∞</button>
                    <button class="btn btn-primary" id="apply-layout">–ü—Ä–∏–º–µ–Ω–∏—Ç—å</button>
                </div>
            </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        modal.querySelector('.modal-close').addEventListener('click', () => {
            this.closeModal(modal);
        });

        modal.querySelector('.modal-overlay').addEventListener('click', () => {
            this.closeModal(modal);
        });

        modal.querySelector('#cancel-layout').addEventListener('click', () => {
            this.closeModal(modal);
        });

        modal.querySelector('#apply-layout').addEventListener('click', () => {
            const selectedLayout = modal.querySelector('.layout-option.active')?.dataset.layout;
            if (selectedLayout) {
                this.applyLayout(selectedLayout);
                this.updateLayoutIndicator();
            }
            this.closeModal(modal);
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –º–∞–∫–µ—Ç–∞
        modal.querySelectorAll('.layout-option').forEach(option => {
            option.addEventListener('click', () => {
                modal.querySelectorAll('.layout-option').forEach(opt => opt.classList.remove('active'));
                option.classList.add('active');
            });
        });

        return modal;
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    closeModal(modal) {
        modal.classList.remove('show');
        setTimeout(() => {
            if (modal.parentNode) {
                modal.parentNode.removeChild(modal);
            }
        }, 300);
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –º–∞–∫–µ—Ç–∞
    updateLayoutIndicator() {
        const indicator = document.querySelector('.layout-indicator .indicator-text');
        if (indicator) {
            indicator.textContent = this.getLayoutDisplayName(this.currentLayout);
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –º–∞–∫–µ—Ç–∞
    getCurrentLayout() {
        return this.currentLayout;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–∞–∫–µ—Ç–∞
    getLayoutConfig() {
        return this.layoutConfigs[this.currentLayout];
    }

    // –ê–¥–∞–ø—Ç–∞—Ü–∏—è –º–∞–∫–µ—Ç–∞ –ø–æ–¥ —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞
    adaptToScreenSize() {
        const width = window.innerWidth;
        
        if (width < 768) {
            // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –º–∞–∫–µ—Ç
            if (this.currentLayout !== 'compact') {
                this.applyLayout('compact');
            }
        } else if (width < 1024) {
            // –ù–∞ –ø–ª–∞–Ω—à–µ—Ç–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–∞–∫–µ—Ç
            if (this.currentLayout !== 'standard') {
                this.applyLayout('standard');
            }
        }
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –º–∞–∫–µ—Ç–∞
const layoutManager = new LayoutManager();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export default layoutManager;