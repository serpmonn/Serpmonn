#!/usr/bin/env node

// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–º–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ –ª–∞–π–∫–æ–≤
import https from 'https';
import { URL } from 'url';

const BASE_URL = 'https://serpmonn.ru';

function makeRequest(url, options = {}) {
  return new Promise((resolve, reject) => {
    const urlObj = new URL(url);
    const requestOptions = {
      hostname: urlObj.hostname,
      port: urlObj.port || 443,
      path: urlObj.pathname + urlObj.search,
      method: options.method || 'GET',
      headers: {
        'Accept': 'application/json',
        ...options.headers
      }
    };

    const req = https.request(requestOptions, (res) => {
      let data = '';
      res.on('data', (chunk) => data += chunk);
      res.on('end', () => {
        try {
          const jsonData = JSON.parse(data);
          resolve({ status: res.statusCode, data: jsonData });
        } catch (e) {
          resolve({ status: res.statusCode, data: data });
        }
      });
    });

    req.on('error', reject);
    
    if (options.body) {
      req.write(options.body);
    }
    
    req.end();
  });
}

async function testSmartMigration() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–º–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ –ª–∞–π–∫–æ–≤...\n');
  
  const testUrl = 'https://example.com/test-smart-migration';
  const sessionId = 'test_session_' + Date.now();
  
  // 1. –¢–µ—Å—Ç –≥–æ—Å—Ç–µ–≤–æ–≥–æ –ª–∞–π–∫–∞
  console.log('1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –ª–∞–π–∫–∞:');
  try {
    const response = await makeRequest(`${BASE_URL}/api/likes`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      body: `url=${encodeURIComponent(testUrl)}&session_id=${sessionId}`
    });
    
    console.log('   –°—Ç–∞—Ç—É—Å:', response.status);
    console.log('   –û—Ç–≤–µ—Ç:', JSON.stringify(response.data, null, 2));
  } catch (error) {
    console.log('   –û—à–∏–±–∫–∞:', error.message);
  }
  
  // 2. –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–∞–π–∫–∞ —Å —Ç–µ–º –∂–µ session_id (–∏–º–∏—Ç–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏)
  console.log('\n2Ô∏è‚É£ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ª–∞–π–∫ —Å —Ç–µ–º –∂–µ session_id (–º–∏–≥—Ä–∞—Ü–∏—è):');
  try {
    const response = await makeRequest(`${BASE_URL}/api/likes`, {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/x-www-form-urlencoded',
        'x-user-id': 'test-user-migration'
      },
      body: `url=${encodeURIComponent(testUrl)}&session_id=${sessionId}`
    });
    
    console.log('   –°—Ç–∞—Ç—É—Å:', response.status);
    console.log('   –û—Ç–≤–µ—Ç:', JSON.stringify(response.data, null, 2));
    
    if (response.data.migrated) {
      console.log('   ‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!');
    }
  } catch (error) {
    console.log('   –û—à–∏–±–∫–∞:', error.message);
  }
  
  // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è:');
  try {
    const response = await makeRequest(`${BASE_URL}/api/likes?url=${encodeURIComponent(testUrl)}`);
    console.log('   –°—Ç–∞—Ç—É—Å:', response.status);
    console.log('   –û—Ç–≤–µ—Ç:', JSON.stringify(response.data, null, 2));
  } catch (error) {
    console.log('   –û—à–∏–±–∫–∞:', error.message);
  }
  
  // 4. –¢–µ—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
  console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:');
  try {
    const response = await makeRequest(`${BASE_URL}/api/analytics/likes/conversion`);
    console.log('   –°—Ç–∞—Ç—É—Å:', response.status);
    console.log('   –û—Ç–≤–µ—Ç:', JSON.stringify(response.data, null, 2));
  } catch (error) {
    console.log('   –û—à–∏–±–∫–∞:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testSmartMigration().catch(console.error);