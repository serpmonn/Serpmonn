#!/usr/bin/env node

// –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –ª–∞–π–∫–æ–≤
import https from 'https';
import { URL } from 'url';

const BASE_URL = 'https://serpmonn.ru';

function makeRequest(url, options = {}) {
  return new Promise((resolve, reject) => {
    const urlObj = new URL(url);
    const requestOptions = {
      hostname: urlObj.hostname,
      port: urlObj.port || 443,
      path: urlObj.pathname + urlObj.search,
      method: options.method || 'GET',
      headers: {
        'Accept': 'application/json',
        ...options.headers
      }
    };

    const req = https.request(requestOptions, (res) => {
      let data = '';
      res.on('data', (chunk) => data += chunk);
      res.on('end', () => {
        try {
          const jsonData = JSON.parse(data);
          resolve({ status: res.statusCode, data: jsonData });
        } catch (e) {
          resolve({ status: res.statusCode, data: data });
        }
      });
    });

    req.on('error', reject);
    
    if (options.body) {
      req.write(options.body);
    }
    
    req.end();
  });
}

async function debugMigration() {
  console.log('üîç –û—Ç–ª–∞–¥–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ª–∞–π–∫–æ–≤...\n');
  
  const testUrl = 'https://example.com/debug-migration';
  const sessionId = 'debug_session_' + Date.now();
  
  console.log(`üìù –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:`);
  console.log(`   URL: ${testUrl}`);
  console.log(`   Session ID: ${sessionId}\n`);
  
  // 1. –°–æ–∑–¥–∞—Ç—å –≥–æ—Å—Ç–µ–≤–æ–π –ª–∞–π–∫
  console.log('1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –ª–∞–π–∫–∞:');
  try {
    const response = await makeRequest(`${BASE_URL}/api/likes`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      body: `url=${encodeURIComponent(testUrl)}&session_id=${sessionId}`
    });
    
    console.log('   –°—Ç–∞—Ç—É—Å:', response.status);
    console.log('   –û—Ç–≤–µ—Ç:', JSON.stringify(response.data, null, 2));
    
    if (response.data.status === 'ok' && response.data.accepted) {
      console.log('   ‚úÖ –ì–æ—Å—Ç–µ–≤–æ–π –ª–∞–π–∫ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
    } else {
      console.log('   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ—Å—Ç–µ–≤–æ–≥–æ –ª–∞–π–∫–∞');
      return;
    }
  } catch (error) {
    console.log('   ‚ùå –û—à–∏–±–∫–∞:', error.message);
    return;
  }
  
  // 2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –ª–∞–π–∫–∞
  console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –ª–∞–π–∫–∞:');
  try {
    const response = await makeRequest(`${BASE_URL}/api/likes?url=${encodeURIComponent(testUrl)}`);
    console.log('   –°—Ç–∞—Ç—É—Å:', response.status);
    console.log('   –û—Ç–≤–µ—Ç:', JSON.stringify(response.data, null, 2));
  } catch (error) {
    console.log('   ‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
  
  // 3. –°–æ–∑–¥–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ª–∞–π–∫ —Å —Ç–µ–º –∂–µ session_id (–¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –º–∏–≥—Ä–∞—Ü–∏—è)
  console.log('\n3Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–∞–π–∫–∞ (–º–∏–≥—Ä–∞—Ü–∏—è):');
  try {
    const response = await makeRequest(`${BASE_URL}/api/likes`, {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/x-www-form-urlencoded',
        'x-user-id': 'debug-user-123'
      },
      body: `url=${encodeURIComponent(testUrl)}&session_id=${sessionId}`
    });
    
    console.log('   –°—Ç–∞—Ç—É—Å:', response.status);
    console.log('   –û—Ç–≤–µ—Ç:', JSON.stringify(response.data, null, 2));
    
    if (response.data.migrated) {
      console.log('   ‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!');
    } else if (response.data.accepted) {
      console.log('   ‚ö†Ô∏è –õ–∞–π–∫ –ø—Ä–∏–Ω—è—Ç, –Ω–æ –º–∏–≥—Ä–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞');
    } else {
      console.log('   ‚ùå –õ–∞–π–∫ –Ω–µ –ø—Ä–∏–Ω—è—Ç');
    }
  } catch (error) {
    console.log('   ‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
  
  // 4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  console.log('\n4Ô∏è‚É£ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:');
  try {
    const response = await makeRequest(`${BASE_URL}/api/likes?url=${encodeURIComponent(testUrl)}`);
    console.log('   –°—Ç–∞—Ç—É—Å:', response.status);
    console.log('   –û—Ç–≤–µ—Ç:', JSON.stringify(response.data, null, 2));
    
    const counts = response.data.counts;
    if (counts) {
      console.log(`   üìä –ò—Ç–æ–≥–æ–≤—ã–µ —Å—á—ë—Ç—á–∏–∫–∏:`);
      console.log(`      –ì–æ—Å—Ç–µ–≤—ã–µ: ${counts.guest}`);
      console.log(`      –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ: ${counts.auth}`);
      console.log(`      –û–±—â–∏–π: ${counts.total}`);
      
      if (counts.auth > 0 && counts.guest === 0) {
        console.log('   ‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ!');
      } else if (counts.auth > 0 && counts.guest > 0) {
        console.log('   ‚ö†Ô∏è –ï—Å—Ç—å –∏ –≥–æ—Å—Ç–µ–≤—ã–µ, –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ª–∞–π–∫–∏ (–≤–æ–∑–º–æ–∂–Ω–æ, –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ)');
      } else {
        console.log('   ‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞');
      }
    }
  } catch (error) {
    console.log('   ‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ –æ—Ç–ª–∞–¥–∫–∏
debugMigration().catch(console.error);