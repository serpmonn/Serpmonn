import dotenv from 'dotenv';
import TelegramBot from 'node-telegram-bot-api';
import axios from 'axios';
import { RateLimiter } from 'limiter';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
dotenv.config({ path: '/var/www/serpmonn.ru/backend/telegram_bots/meme-bot/.env' });

const TOKEN = process.env.TELEGRAM_TOKEN;
const REDDIT_CLIENT_ID = process.env.REDDIT_CLIENT_ID;
const REDDIT_CLIENT_SECRET = process.env.REDDIT_CLIENT_SECRET;

const bot = new TelegramBot(TOKEN, {
  polling: {
    interval: 2000,
    autoStart: true,
    params: { timeout: 10 }
  },
  filepath: false
});

const SUBREDDITS = ['memes', 'ProgrammerHumor'];
const REQUEST_TIMEOUT = 8000;
const POST_LIMIT = 50;
const limiter = new RateLimiter({ tokensPerInterval: 15, interval: 'second' });
const redditLimiter = new RateLimiter({ tokensPerInterval: 30, interval: 'minute' });

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ polling
const ADMIN_CHAT_ID = 5726590332;
let errorCount = 0;
const MAX_ERRORS = 10;

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ reddit
let redditToken = {
  reddit_access_token: null,
  expires_at: 0
};

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ VK Ads
let vkAdsToken = {
  vk_access_token: null, // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
  refresh_token: null, // –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è refresh_token
  expires_at: 0
};

// –°—á–µ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã
let memeCount = 0;
const AD_FREQUENCY = 5; // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–µ–∫–ª–∞–º—É –ø–æ—Å–ª–µ –∫–∞–∂–¥—ã—Ö 5 –º–µ–º–æ–≤

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è access_token –¥–ª—è VK Ads
async function getVkAccessToken() {
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
    if (vkAdsToken.vk_access_token && Date.now() < vkAdsToken.expires_at - 300000) {
      console.log('[INFO] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π VK Ads access_token');
      return vkAdsToken.vk_access_token;
    }

    const response = await axios.post(
      'https://ads.vk.com/api/v2/oauth2/token.json', // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
      {
        client_id: process.env.VK_ADS_CLIENT_ID,
        client_secret: process.env.VK_ADS_CLIENT_SECRET,
        grant_type: 'client_credentials'
      },
      {
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          'User-Agent': 'MemeBot/1.0 (by /u/Serpmonn)'
        },
        timeout: REQUEST_TIMEOUT
      }
    );

    vkAdsToken = {
      vk_access_token: response.data.access_token,
      refresh_token: response.data.refresh_token, // –°–æ—Ö—Ä–∞–Ω—è–µ–º refresh_token
      expires_at: Date.now() + (response.data.expires_in * 1000)
    };

    console.log(`[INFO] –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π VK Ads access_token, –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ ${response.data.expires_in} —Å–µ–∫—É–Ω–¥`);
    return vkAdsToken.vk_access_token;
  } catch (error) {
    console.error('[VK ADS TOKEN ERROR]', {
      message: error.message,
      status: error.response?.status,
      data: error.response?.data
    });
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å access_token –æ—Ç VK Ads');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è access_token
async function refreshVkAccessToken() {
  try {
    const response = await axios.post(
      'https://ads.vk.com/api/v2/oauth2/token.json',
      {
        grant_type: 'refresh_token',
        refresh_token: vkAdsToken.refresh_token,
        client_id: process.env.VK_ADS_CLIENT_ID,
        client_secret: process.env.VK_ADS_CLIENT_SECRET
      },
      {
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          'User-Agent': 'MemeBot/1.0 (by /u/Serpmonn)'
        },
        timeout: REQUEST_TIMEOUT
      }
    );

    vkAdsToken = {
      vk_access_token: response.data.access_token,
      refresh_token: response.data.refresh_token,
      expires_at: Date.now() + (response.data.expires_in * 1000)
    };

    console.log(`[INFO] VK Ads access_token —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω`);
    return vkAdsToken.vk_access_token;
  } catch (error) {
    console.error('[VK ADS REFRESH TOKEN ERROR]', {
      message: error.message,
      status: error.response?.status,
      data: error.response?.data
    });
    // –ï—Å–ª–∏ refresh_token –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
    if (error.response?.data?.code === 'invalid_token') {
      return getVkAccessToken();
    }
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å access_token –æ—Ç VK Ads');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã –∏–∑ VK Ad Network
async function getVkAd() {
  try {
    const token = await getVkAccessToken();
    const response = await axios.get('https://ads.vk.com/api/v2/ad_plans.json', {
      params: {
        client_id: process.env.VK_ADS_CLIENT_ID,
        ad_slot: '1873118'
      },
      headers: {
        'Authorization': `Bearer ${token}`,
        'User-Agent': 'MemeBot/1.0 (by /u/Serpmonn)'
      },
      timeout: REQUEST_TIMEOUT
    });

    const ad = response.data.items?.[0] || response.data.ads?.[0]; // –ì–∏–±–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
    if (!ad) throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π');
    return {
      text: ad.description || ad.title || '–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —ç—Ç–æ –∫—Ä—É—Ç–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!',
      url: ad.link || ad.url || 'https://t.me/serpmonn_life',
      image: ad.image || ad.image_url || null
    };
  } catch (error) {
    console.error('[VK ADS ERROR]', {
      message: error.message,
      status: error.response?.status,
      data: error.response?.data
    });
    return {
      text: 'üî• –ö—Ä—É—Ç—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ –∂–¥—É—Ç –Ω–∞ <a href="https://t.me/serpmonn_life">@serpmonn_life</a>! –ü–æ–¥–ø–∏—à–∏—Å—å! üòé',
      url: 'https://t.me/serpmonn_life',
      image: null
    };
  }
}

bot.on('polling_error', (error) => {
  console.error(`[POLLING ERROR] ${new Date().toISOString()}:`, error.message);
  if (ADMIN_CHAT_ID) {
    if (error.message.includes('502 Bad Gateway') || error.message.includes('504 Gateway Timeout')) {
      console.log('[INFO] –í—Ä–µ–º–µ–Ω–Ω—ã–π —Å–±–æ–π Telegram API');
      errorCount++;
      if (errorCount >= MAX_ERRORS) {
        bot.sendMessage(ADMIN_CHAT_ID, `‚ö†Ô∏è –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ polling: ${error.message}`)
          .catch(err => console.error('[SEND MESSAGE ERROR]', err.message));
        errorCount = 0;
      }
    } else {
      bot.sendMessage(ADMIN_CHAT_ID, `‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ polling: ${error.message}`)
        .catch(err => console.error('[SEND MESSAGE ERROR]', err.message));
    }
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(
    chatId,
    `–ü—Ä–∏–≤–µ—Ç, ${msg.from.first_name}! üòä\n` +
    `–Ø - –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–æ—Å–∏—Ç —Å–≤–µ–∂–∏–µ –º–µ–º—ã –ø—Ä—è–º–æ –∏–∑ Reddit.\n\n` +
    `–û—Ç–ø—Ä–∞–≤—å /meme –∏ –ø–æ–ª—É—á–∏ –ø–æ—Ä—Ü–∏—é —Å–º–µ—Ö–∞! üî•\n` +
    `–ö—Å—Ç–∞—Ç–∏, –∫–∞–Ω–∞–ª <a href="https://t.me/serpmonn_life">@serpmonn_life</a> —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞! üòé`,
    {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [[
          { text: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–Ω–∞–ª', url: 'https://t.me/serpmonn_life' }
        ]]
      }
    }
  ).catch(err => console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ /start:', err));
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /meme
bot.onText(/\/meme/, async (msg) => {
  const chatId = msg.chat.id;

  try {
    await limiter.removeTokens(1);
    await bot.sendChatAction(chatId, 'upload_photo');

    const memeUrl = await getRedditMeme();
    await sendPhotoWithRetry(chatId, memeUrl, {
      caption: '–î–µ—Ä–∂–∏ –≥–æ—Ä—è—á–∏–π –º–µ–º! üî•',
      parse_mode: 'HTML'
    });

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –º–µ–º–æ–≤
    memeCount++;

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∫–ª–∞–º—ã –ø–æ—Å–ª–µ –∫–∞–∂–¥—ã—Ö AD_FREQUENCY –º–µ–º–æ–≤
    if (memeCount >= AD_FREQUENCY) {
      const ad = await getVkAd();
      const adUrl = `${ad.url}?utm_source=telegram&utm_medium=bot&utm_campaign=meme_ad_${chatId}`;
      if (ad.image) {
        await sendPhotoWithRetry(chatId, ad.image, {
          caption: ad.text,
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [[
              { text: '–ü–æ–¥—Ä–æ–±–Ω–µ–µ', url: adUrl }
            ]]
          }
        });
      } else {
        await bot.sendMessage(
          chatId,
          ad.text,
          {
            parse_mode: 'HTML',
            reply_markup: {
              inline_keyboard: [[
                { text: '–ü–æ–¥—Ä–æ–±–Ω–µ–µ', url: adUrl }
              ]]
            }
          }
        );
      }
      console.log(`[–†–ï–ö–õ–ê–ú–ê] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç ${chatId}: ${ad.text} (${adUrl})`);
      memeCount = 0;
    }

  } catch (error) {
    console.error(`[–û–®–ò–ë–ö–ê] ${new Date().toISOString()}:`, error.message);
    await bot.sendMessage(
      chatId,
      `‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–º–∞</b>\n` +
      `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /meme`,
      { parse_mode: 'HTML', disable_notification: true }
    );
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ Reddit
async function getRedditToken() {
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
    if (redditToken.access_token && Date.now() < redditToken.expires_at - 300000) {
      return redditToken.access_token;
    }

    await redditLimiter.removeTokens(1);
    const authResponse = await axios.post(
      'https://www.reddit.com/api/v1/access_token',
      'grant_type=client_credentials',
      {
        auth: {
          username: REDDIT_CLIENT_ID,
          password: REDDIT_CLIENT_SECRET
        },
        headers: {
          'User-Agent': 'MemeBot/1.0 (by /u/Serpmonn)',
          'Content-Type': 'application/x-www-form-urlencoded'
        },
        timeout: REQUEST_TIMEOUT
      }
    );

    redditToken = {
      access_token: authResponse.data.access_token,
      expires_at: Date.now() + (authResponse.data.expires_in * 1000)
    };

    console.log('[INFO] –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π OAuth —Ç–æ–∫–µ–Ω');
    return redditToken.access_token;
  } catch (error) {
    console.error('[TOKEN ERROR]', {
      message: error.message,
      response: error.response?.data
    });
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω Reddit');
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–º–∞ —Å Reddit
async function getRedditMeme() {
  try {
    const token = await getRedditToken();
    const randomSub = SUBREDDITS[Math.floor(Math.random() * SUBREDDITS.length)];
    console.log(`[INFO] –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –º–µ–º—ã –∏–∑ r/${randomSub}`);

    const response = await axios.get(
      `https://oauth.reddit.com/r/${randomSub}/hot.json?limit=${POST_LIMIT}`,
      {
        headers: {
          'User-Agent': 'MemeBot/1.0 (by /u/Serpmonn)',
          'Authorization': `Bearer ${token}`
        },
        timeout: REQUEST_TIMEOUT
      }
    );

    if (!response?.data?.data?.children) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Reddit API: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ');
    }

    console.log(`[INFO] –ü–æ–ª—É—á–µ–Ω–æ ${response.data.data.children.length} –ø–æ—Å—Ç–æ–≤ –∏–∑ r/${randomSub}`);

    const validPosts = response.data.data.children.filter(post => {
      if (!post?.data) return false;
      
      const url = post.data.url || '';
      return (
        !post.data.over_18 &&
        !post.data.is_video &&
        !post.data.is_self &&
        isValidImageUrl(url)
      );
    });

    if (!validPosts.length) {
      throw new Error(`–í r/${randomSub} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–µ–º–æ–≤`);
    }

    const post = validPosts[Math.floor(Math.random() * validPosts.length)];
    let memeUrl = post.data.url;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ Imgur —Å—Å—ã–ª–æ–∫
    if (memeUrl.includes('imgur.com') && !memeUrl.includes('i.imgur.com')) {
      memeUrl = memeUrl.replace('imgur.com', 'i.imgur.com') + '.jpg';
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ preview.redd.it –≤ i.redd.it
    if (memeUrl.includes('preview.redd.it')) {
      if (post.data.url_overridden_by_dest) {
        memeUrl = post.data.url_overridden_by_dest;
      } else {
        const urlObj = new URL(memeUrl);
        urlObj.hostname = 'i.redd.it';
        memeUrl = urlObj.toString().split('?')[0];
      }
    }

    // –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º URL
    memeUrl = formatMemeUrl(memeUrl);
    
    console.log(`[INFO] –í—ã–±—Ä–∞–Ω –º–µ–º: ${memeUrl}`);
    return memeUrl;
    
  } catch (error) {
    console.error(`[REDDIT API ERROR]`, {
      status: error.response?.status,
      data: error.response?.data,
      message: error.message,
      stack: error.stack
    });
    throw error;
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
function isValidImageUrl(url) {
  if (!url || typeof url !== 'string') return false;
  
  try {
    new URL(url);
  } catch (e) {
    return false;
  }

  const allowedDomains = [
    'i.redd.it',
    'i.imgur.com',
    'imgur.com'
  ];
  
  return allowedDomains.some(domain => url.includes(domain)) || 
         /\.(jpe?g|png|gif|webp)(\?.*)?$/i.test(url);
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ URL –º–µ–º–∞
function formatMemeUrl(url) {
  if (!url) return '';
  
  try {
    // –£–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL
    url = url.split('?')[0];
    
    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç %-—Å–∏–º–≤–æ–ª—ã
    if (url.includes('%')) {
      url = decodeURIComponent(url);
    }
    
    return url.replace(/&amp;/g, '&');
  } catch (e) {
    console.warn(`[WARN] –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è URL: ${url}`, e.message);
    return url;
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
async function sendPhotoWithRetry(chatId, url, options, retries = 3, delay = 5000) {
  try {
    options.headers = {
      'User-Agent': 'MemeBot/1.0 (by /u/Serpmonn)'
    };
    
    await bot.sendPhoto(chatId, url, options);
  } catch (error) {
    if (error.message.includes('429 Too Many Requests') && retries > 0) {
      console.log(`[INFO] 429 detected, retrying after ${delay}ms...`);
      await new Promise(resolve => setTimeout(resolve, delay));
      return sendPhotoWithRetry(chatId, url, options, retries - 1, delay * 2);
    }
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
console.log(`[${new Date().toISOString()}] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! üöÄ`);
console.log(`–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å–∞–±—Ä–µ–¥–¥–∏—Ç—ã:`, SUBREDDITS.join(', '));