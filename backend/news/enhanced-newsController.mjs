import RSSParser from 'rss-parser';

const parser = new RSSParser();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π
const NEWS_SOURCES = {
    ria: {
        name: '–†–ò–ê –ù–æ–≤–æ—Å—Ç–∏',
        url: 'https://ria.ru/export/rss2/archive/index.xml',
        category: 'general',
        icon: 'üì∞'
    },
    lenta: {
        name: 'Lenta.ru',
        url: 'https://lenta.ru/rss',
        category: 'general',
        icon: 'üì∞'
    },
    tass: {
        name: '–¢–ê–°–°',
        url: 'https://tass.ru/rss/v2.xml',
        category: 'general',
        icon: 'üì∞'
    },
    interfax: {
        name: '–ò–Ω—Ç–µ—Ä—Ñ–∞–∫—Å',
        url: 'https://www.interfax.ru/rss.asp',
        category: 'general',
        icon: 'üì∞'
    },
    kommersant: {
        name: '–ö–æ–º–º–µ—Ä—Å–∞–Ω—Ç—ä',
        url: 'https://www.kommersant.ru/RSS/news.xml',
        category: 'business',
        icon: 'üíº'
    },
    vedomosti: {
        name: '–í–µ–¥–æ–º–æ—Å—Ç–∏',
        url: 'https://www.vedomosti.ru/rss/news',
        category: 'business',
        icon: 'üíº'
    },
    rb: {
        name: '–†–ë–ö',
        url: 'https://www.rbc.ru/rss/',
        category: 'business',
        icon: 'üíº'
    },
    sport24: {
        name: '–°–ø–æ—Ä—Ç-24',
        url: 'https://sport24.ru/rss.xml',
        category: 'sport',
        icon: '‚öΩ'
    },
    championat: {
        name: '–ß–µ–º–ø–∏–æ–Ω–∞—Ç',
        url: 'https://www.championat.com/rss/news.xml',
        category: 'sport',
        icon: '‚öΩ'
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è RSS-–ª–µ–Ω—Ç—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
export const fetchRSSFeed = async (url, sourceId) => {
    try {
        console.log(`–ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ ${sourceId}...`);
        const feed = await parser.parseURL(url);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ –∫ –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ—Å—Ç–∏
        const itemsWithSource = feed.items.map(item => ({
            ...item,
            sourceId,
            sourceName: NEWS_SOURCES[sourceId]?.name || sourceId,
            sourceIcon: NEWS_SOURCES[sourceId]?.icon || 'üì∞',
            category: NEWS_SOURCES[sourceId]?.category || 'general'
        }));
        
        console.log(`–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${itemsWithSource.length} –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ ${sourceId}`);
        return itemsWithSource;
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π —Å ${sourceId}:`, error.message);
        return null;
    }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
export const getNewsFromSource = async (req, res) => {
    const { sourceId } = req.params;
    
    if (!NEWS_SOURCES[sourceId]) {
        return res.status(404).json({ 
            error: '–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω',
            availableSources: Object.keys(NEWS_SOURCES)
        });
    }
    
    try {
        const source = NEWS_SOURCES[sourceId];
        const news = await fetchRSSFeed(source.url, sourceId);
        
        if (news) {
            res.json(news);
        } else {
            res.status(500).json({ 
                error: `–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ ${source.name}` 
            });
        }
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ ${sourceId}:`, error);
        res.status(500).json({ 
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
        });
    }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
export const getPersonalizedNews = async (req, res) => {
    try {
        const { favoriteSources = [], categories = [] } = req.query;
        
        // –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ
        const sourcesToFetch = favoriteSources.length > 0 
            ? favoriteSources.filter(sourceId => NEWS_SOURCES[sourceId])
            : Object.keys(NEWS_SOURCES);
        
        console.log(`–ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: ${sourcesToFetch.join(', ')}`);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –≤—Å–µ—Ö —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        const newsPromises = sourcesToFetch.map(sourceId => 
            fetchRSSFeed(NEWS_SOURCES[sourceId].url, sourceId)
        );
        
        const newsResults = await Promise.allSettled(newsPromises);
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
        let allNews = [];
        newsResults.forEach((result, index) => {
            if (result.status === 'fulfilled' && result.value) {
                allNews.push(...result.value);
            } else {
                console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ ${sourcesToFetch[index]}`);
            }
        });
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        allNews.sort((a, b) => new Date(b.pubDate) - new Date(a.pubDate));
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
        if (categories.length > 0) {
            allNews = allNews.filter(article => 
                categories.includes(article.category)
            );
        }
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π
        const maxNews = 50;
        allNews = allNews.slice(0, maxNews);
        
        console.log(`–í–æ–∑–≤—Ä–∞—â–∞–µ–º ${allNews.length} –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π`);
        
        res.json({
            news: allNews,
            total: allNews.length,
            sources: sourcesToFetch,
            categories: categories,
            timestamp: new Date().toISOString()
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π:', error);
        res.status(500).json({ 
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
        });
    }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
export const getAvailableSources = async (req, res) => {
    try {
        const sources = Object.entries(NEWS_SOURCES).map(([id, source]) => ({
            id,
            name: source.name,
            category: source.category,
            icon: source.icon,
            url: source.url
        }));
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        const sourcesByCategory = sources.reduce((acc, source) => {
            if (!acc[source.category]) {
                acc[source.category] = [];
            }
            acc[source.category].push(source);
            return acc;
        }, {});
        
        res.json({
            sources,
            sourcesByCategory,
            total: sources.length
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:', error);
        res.status(500).json({ 
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
        });
    }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
export const getSourcesStats = async (req, res) => {
    try {
        const stats = {
            totalSources: Object.keys(NEWS_SOURCES).length,
            categories: {},
            lastUpdated: new Date().toISOString()
        };
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        Object.values(NEWS_SOURCES).forEach(source => {
            if (!stats.categories[source.category]) {
                stats.categories[source.category] = 0;
            }
            stats.categories[source.category]++;
        });
        
        res.json(stats);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:', error);
        res.status(500).json({ 
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
        });
    }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
export const checkSourceAvailability = async (req, res) => {
    const { sourceId } = req.params;
    
    if (!NEWS_SOURCES[sourceId]) {
        return res.status(404).json({ 
            error: '–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' 
        });
    }
    
    try {
        const source = NEWS_SOURCES[sourceId];
        const startTime = Date.now();
        
        const news = await fetchRSSFeed(source.url, sourceId);
        const responseTime = Date.now() - startTime;
        
        res.json({
            sourceId,
            available: !!news,
            responseTime: `${responseTime}ms`,
            newsCount: news ? news.length : 0,
            lastChecked: new Date().toISOString()
        });
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ ${sourceId}:`, error);
        res.status(500).json({ 
            error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏' 
        });
    }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
export const getNewsByCategory = async (req, res) => {
    const { category } = req.params;
    
    try {
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const categorySources = Object.entries(NEWS_SOURCES)
            .filter(([id, source]) => source.category === category)
            .map(([id, source]) => id);
        
        if (categorySources.length === 0) {
            return res.status(404).json({ 
                error: `–ö–∞—Ç–µ–≥–æ—Ä–∏—è '${category}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞` 
            });
        }
        
        console.log(`–ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '${category}' –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: ${categorySources.join(', ')}`);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const newsPromises = categorySources.map(sourceId => 
            fetchRSSFeed(NEWS_SOURCES[sourceId].url, sourceId)
        );
        
        const newsResults = await Promise.allSettled(newsPromises);
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏
        let allNews = [];
        newsResults.forEach((result, index) => {
            if (result.status === 'fulfilled' && result.value) {
                allNews.push(...result.value);
            }
        });
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
        allNews.sort((a, b) => new Date(b.pubDate) - new Date(a.pubDate));
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        const maxNews = 30;
        allNews = allNews.slice(0, maxNews);
        
        res.json({
            category,
            news: allNews,
            total: allNews.length,
            sources: categorySources,
            timestamp: new Date().toISOString()
        });
        
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '${category}':`, error);
        res.status(500).json({ 
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
        });
    }
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export { NEWS_SOURCES };