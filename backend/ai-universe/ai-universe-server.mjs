import express from 'express';
import cors from 'cors';
import rateLimit from 'express-rate-limit';
import BehaviorAnalyzer from './behavior-analyzer.mjs';
import PersonalizedSearch from './personalized-search.mjs';
import dotenv from 'dotenv';

dotenv.config({ path: '/var/www/serpmonn.ru/.env' });

const app = express();
const port = process.env.AI_UNIVERSE_PORT || 3600;

// Middleware
app.use(cors());
app.use(express.json());

// Rate limiting
const apiLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
  max: 100, // –º–∞–∫—Å–∏–º—É–º 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ IP –∑–∞ 15 –º–∏–Ω—É—Ç
  standardHeaders: true,
  legacyHeaders: false
});
app.use(apiLimiter);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
const behaviorAnalyzer = new BehaviorAnalyzer();
const personalizedSearch = new PersonalizedSearch();

/**
 * API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
app.post('/api/ai-universe/analyze-behavior', async (req, res) => {
  try {
    const { userId, actionType, data } = req.body;
    
    if (!userId || !actionType || !data) {
      return res.status(400).json({ 
        error: '–¢—Ä–µ–±—É—é—Ç—Å—è –ø–æ–ª—è: userId, actionType, data' 
      });
    }

    let analysis;
    
    switch (actionType) {
      case 'search_query':
        analysis = await behaviorAnalyzer.analyzeSearchQuery(data.query, userId);
        break;
      case 'game_behavior':
        analysis = await behaviorAnalyzer.analyzeGameBehavior(data, userId);
        break;
      default:
        return res.status(400).json({ 
          error: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è' 
        });
    }

    res.json({
      success: true,
      analysis,
      timestamp: new Date()
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è:', error);
    res.status(500).json({ 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
  }
});

/**
 * API –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
 */
app.post('/api/ai-universe/personalized-search', async (req, res) => {
  try {
    const { userId, query, searchResults } = req.body;
    
    if (!userId || !query) {
      return res.status(400).json({ 
        error: '–¢—Ä–µ–±—É—é—Ç—Å—è –ø–æ–ª—è: userId, query' 
      });
    }

    const personalizedResults = await personalizedSearch.performPersonalizedSearch(
      query,
      userId,
      searchResults || []
    );

    res.json({
      success: true,
      ...personalizedResults
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:', error);
    res.status(500).json({ 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
  }
});

/**
 * API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
 */
app.get('/api/ai-universe/user-profile/:userId', async (req, res) => {
  try {
    const { userId } = req.params;
    
    const profile = await behaviorAnalyzer.createPersonalProfile(parseInt(userId));
    
    res.json({
      success: true,
      profile,
      timestamp: new Date()
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
    res.status(500).json({ 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
  }
});

/**
 * API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
 */
app.get('/api/ai-universe/recommendations/:userId', async (req, res) => {
  try {
    const { userId } = req.params;
    const { context = 'general' } = req.query;
    
    const recommendations = await behaviorAnalyzer.generatePersonalizedRecommendations(
      parseInt(userId),
      context
    );
    
    res.json({
      success: true,
      recommendations,
      context,
      timestamp: new Date()
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', error);
    res.status(500).json({ 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
  }
});

/**
 * API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–∏—Å–∫–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 */
app.get('/api/ai-universe/personalized-page/:userId', async (req, res) => {
  try {
    const { userId } = req.params;
    
    const personalizedPage = await personalizedSearch.createPersonalizedSearchPage(
      parseInt(userId)
    );
    
    res.json({
      success: true,
      ...personalizedPage,
      timestamp: new Date()
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error);
    res.status(500).json({ 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
  }
});

/**
 * API –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
 */
app.get('/api/ai-universe/predict-queries/:userId', async (req, res) => {
  try {
    const { userId } = req.params;
    
    const predictedQueries = await personalizedSearch.predictNextQueries(
      parseInt(userId)
    );
    
    res.json({
      success: true,
      predictedQueries,
      timestamp: new Date()
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤:', error);
    res.status(500).json({ 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
  }
});

/**
 * API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ AI-–≤—Å–µ–ª–µ–Ω–Ω–æ–π
 */
app.get('/api/ai-universe/stats', async (req, res) => {
  try {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI-—Ñ—É–Ω–∫—Ü–∏–π
    const stats = {
      totalUsers: 0, // –ü–æ–ª—É—á–∏—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      totalSearches: 0,
      totalRecommendations: 0,
      averagePersonalizationScore: 0,
      mostPopularFeatures: []
    };
    
    res.json({
      success: true,
      stats,
      timestamp: new Date()
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    res.status(500).json({ 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
  }
});

/**
 * API –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AI-—Ñ—É–Ω–∫—Ü–∏–π
 */
app.post('/api/ai-universe/test', async (req, res) => {
  try {
    const { testType, data } = req.body;
    
    let result;
    
    switch (testType) {
      case 'behavior_analysis':
        result = await behaviorAnalyzer.analyzeSearchQuery(data.query, 1);
        break;
      case 'personalized_search':
        result = await personalizedSearch.performPersonalizedSearch(
          data.query,
          1,
          data.results || []
        );
        break;
      default:
        return res.status(400).json({ 
          error: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ç–µ—Å—Ç–∞' 
        });
    }
    
    res.json({
      success: true,
      testType,
      result,
      timestamp: new Date()
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    res.status(500).json({ 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', err);
  res.status(500).json({ 
    error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
  });
});

// 404 –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
app.use('*', (req, res) => {
  res.status(404).json({ 
    error: 'API endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω' 
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(port, () => {
  console.log(`üöÄ AI-Universe —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
  console.log(`üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ API endpoints:`);
  console.log(`   POST /api/ai-universe/analyze-behavior`);
  console.log(`   POST /api/ai-universe/personalized-search`);
  console.log(`   GET  /api/ai-universe/user-profile/:userId`);
  console.log(`   GET  /api/ai-universe/recommendations/:userId`);
  console.log(`   GET  /api/ai-universe/personalized-page/:userId`);
  console.log(`   GET  /api/ai-universe/predict-queries/:userId`);
  console.log(`   GET  /api/ai-universe/stats`);
  console.log(`   POST /api/ai-universe/test`);
});

export default app;