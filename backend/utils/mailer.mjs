import nodemailer from 'nodemailer';
import dotenv from 'dotenv';                                                                                                     // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º dotenv –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
import { resolve } from 'path';                                                                                                  // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º resolve –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –ø—É—Ç–µ–π

const isProduction = process.env.NODE_ENV === 'production';                                                                      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: production –∏–ª–∏ development
const envPath = isProduction                                                                                                     // –í—ã–±–∏—Ä–∞–µ–º –ø—É—Ç—å –∫ .env —Ñ–∞–π–ª—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
    ? '/var/www/serpmonn.ru/.env'                                                                                                // –ü—Ä–æ–¥–∞–∫—à–µ–Ω –ø—É—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    : resolve(process.cwd(), 'backend/.env');                                                                                    // –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ - –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ .env –≤ –ø–∞–ø–∫–µ backend

dotenv.config({ path: envPath });                                                                                                // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É—Ç–∏

// –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ—Ä
const createTransporter = () => {
  if (process.env.NODE_ENV === 'development' || !process.env.SMTP_PASS) {
    console.log('üìß DEVELOPMENT MODE: Emails are logged to console instead of sending');
    
    // –¢–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –ª–æ–≥–∏—Ä—É–µ—Ç –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏
    return {
      sendMail: (mailOptions) => {
        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        console.log('üìß DEVELOPMENT EMAIL (NOT SENT):');
        console.log('   To:', mailOptions.to);
        console.log('   Subject:', mailOptions.subject);
        console.log('   Text:', mailOptions.text?.substring(0, 200) + '...');
        console.log('   HTML:', mailOptions.html ? 'üìÑ [HTML content]' : '‚ùå No HTML');
        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        
        // –ò–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
        return Promise.resolve({ 
          messageId: 'dev-' + Date.now(),
          response: '250 Email logged in development mode'
        });
      },
      verify: (callback) => {
        console.log('‚úÖ SMTP verification skipped in development');
        callback(null, true);
      }
    };
  }
  
  // –ü—Ä–æ–¥–∞–∫—à–µ–Ω - —Ä–µ–∞–ª—å–Ω—ã–π SMTP
  console.log('üìß PRODUCTION MODE: Using real SMTP server');
  return nodemailer.createTransport({
    host: process.env.SMTP_HOST || '90.156.150.124',
    port: process.env.SMTP_PORT || 587,
    secure: false,
    auth: {
      user: process.env.SMTP_USER || 'support@serpmonn.ru',
      pass: process.env.SMTP_PASS
    },
    // –¢–∞–π–º–∞—É—Ç—ã –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥–æ–ª–≥–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è
    connectionTimeout: 10000,
    greetingTimeout: 10000,
    socketTimeout: 10000
  });
};

export const transporter = createTransporter();

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º
export async function sendResetEmail(to, resetLink) {
  console.log(`üîê Password reset for: ${to}`);
  console.log(`   Reset link: ${resetLink}`);
  
  const mailOptions = {
    from: '"Serpmonn" <support@serpmonn.ru>',
    to: to,
    subject: '–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è Serpmonn',
    text: `–î–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: ${resetLink}`,
    html: `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <h2 style="color: #007acc;">–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è Serpmonn</h2>
        <p>–î–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:</p>
        <a href="${resetLink}" style="background: #007acc; color: white; padding: 12px 24px; text-decoration: none; border-radius: 4px; display: inline-block;">
          –°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å
        </a>
        <p style="margin-top: 20px; color: #666; font-size: 12px;">
          –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.
        </p>
      </div>
    `
  };

  try {
    const info = await transporter.sendMail(mailOptions);
    console.log('‚úÖ Password reset email processed:', info.messageId);
    return info;
  } catch (error) {
    console.error('‚ùå Email error:', error.message);
    // –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –Ω–µ –ø–∞–¥–∞–µ–º, –∞ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    if (process.env.NODE_ENV === 'development') {
      return { messageId: 'dev-error', response: 'Email failed but continuing in dev mode' };
    }
    throw error;
  }
}

export async function sendConfirmationEmail(to, confirmLink) {
  console.log(`‚úÖ Email confirmation for: ${to}`);
  console.log(`   Confirm link: ${confirmLink}`);
  
  const mailOptions = {
    from: '"Serpmonn" <support@serpmonn.ru>',
    to: to,
    subject: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email Serpmonn',
    text: `–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: ${confirmLink}`,
    html: `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <h2 style="color: #007acc;">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email</h2>
        <p>–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à email:</p>
        <a href="${confirmLink}" style="background: #007acc; color: white; padding: 12px 24px; text-decoration: none; border-radius: 4px; display: inline-block;">
          –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å email
        </a>
        <p style="margin-top: 20px; color: #666; font-size: 12px;">
          –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 24 —á–∞—Å–∞.
        </p>
      </div>
    `
  };

  try {
    const info = await transporter.sendMail(mailOptions);
    console.log('‚úÖ Confirmation email processed:', info.messageId);
    return info;
  } catch (error) {
    console.error('‚ùå Email error:', error.message);
    if (process.env.NODE_ENV === 'development') {
      return { messageId: 'dev-error', response: 'Email failed but continuing in dev mode' };
    }
    throw error;
  }
}